rd_("BaReturns the ID of the tracepoint.C`Get the command line argument for a trace point.BbCreates a new TracePoint instance.ChCreate a new TracePipeRaw with the specified maximum \xe2\x80\xa6CmCreate a new TraceCmdLineCache with the specified maximum \xe2\x80\xa6CkCreate a new TracePipeSnapshot with the given event buffer.CiCreate a new TraceCmdLineCacheSnapshot with the given \xe2\x80\xa6C`The PID of the process that generated the event.CkRemove and return the first event in the trace pipe buffer.CiRemove and return the first command line entry in the \xe2\x80\xa6CkCall the callback function with the given trace entry data.BoThe data associated with the callback function.AoReturns the argument unchanged.0000000000000000BeThe callback function to be executed.BaCalls <code>U::from(self)</code>.0000000000000000BcReturns the name of the tracepoint.ClReturns the first event in the trace pipe buffer without \xe2\x80\xa6CaReturn the first command line entry in the cache.AjRead the tracepoint formatAjRead the tracepoint statusAfRead the tracepoint IDAlClear the trace pipe buffer.BdReturns the flags of the tracepoint.BfFlags associated with the trace event.CdParse the trace entry and return a formatted string.CiThe type of the trace event, typically the tracepoint ID.B`Enable or disable the tracepointAgGet the current CPU ID.AeEnable the tracepointCaInsert a command line argument for a trace point.BeReturns the system of the tracepoint.AfDisable the tracepointoGet the ID fileBgWhether the trace pipe buffer is empty.BnRegister a callback function to the tracepointClCreate a snapshot of the current state of the trace pipe \xe2\x80\xa6CnCreate a snapshot of the current state of the command line \xe2\x80\xa6BdGet the current time in nanoseconds.CiEventInfo holds information about a specific trace event.AeGet the event by nameCnReturns a string representation of the format function for \xe2\x80\xa6CmA trace entry structure that holds metadata about a trace \xe2\x80\xa6CkThe TracePoint structure represents a tracepoint in the \xe2\x80\xa6BbCheck if the tracepoint is enabledCjGet the maximum number of records allowed in the trace \xe2\x80\xa6BoGet the maximum number of records in the cache.BfThe print function for the tracepoint.BlPush a new event into the trace pipe buffer.CmA Rust library for defining and managing tracepoints in a \xe2\x80\xa6AbGet the tracepointCbUnregister a callback function from the tracepointAkGet the current process ID.AcGet the enable fileChThe number of events currently in the trace pipe buffer.AoGet all events in the subsystemAcGet the format fileAnA reference to the tracepoint.CdA trait defining operations for a trace pipe buffer.ClA raw trace pipe buffer that stores trace events as byte \xe2\x80\xa6CeTracePointMap is a mapping from tracepoint IDs to \xe2\x80\xa6BnIterate over all registered callback functionsAiGet the subsystem by nameBnThe preemption count at the time of the event.CmKernelTraceOps trait provides kernel-level operations for \xe2\x80\xa6CmA structure representing a registered tracepoint callback \xe2\x80\xa6CjSet the maximum number of records to keep in the trace \xe2\x80\xa6CbSet the maximum length for command line arguments.AfGet the tracepoint mapCmEventsSubsystem represents a collection of events under a \xe2\x80\xa6CnThe formatted string representation to be used as a header \xe2\x80\xa6AbGet all subsystemsCeA parser for trace entries that formats them into \xe2\x80\xa6ClTracePointEnableFile provides a way to enable or disable \xe2\x80\xa6AlRemove the subsystem by nameCmA cache for storing command line arguments for each trace \xe2\x80\xa6CnA snapshot of the trace pipe buffer at a specific point in \xe2\x80\xa6CbIterate over all registered raw callback functionsBaWrite data to kernel text memory.BnDefine a tracepoint with the given parameters.AmInitialize the tracing eventsBgCache the process name for a given PID.CkReturns a formatted string representing the latency and \xe2\x80\xa6CdCommonTracePointMeta holds metadata for a common \xe2\x80\xa6:ClTracePointFormatFile provides a way to get the format of \xe2\x80\xa6ClTracingEventsManager manages tracing events, subsystems, \xe2\x80\xa6CnA utility struct to manipulate kernel code, primarily used \xe2\x80\xa6CbRegister a raw callback function to the tracepointCnA trait for callback functions that can be registered with \xe2\x80\xa6CfUnregister a raw callback function from the tracepointClA snapshot of the command line cache at a specific point \xe2\x80\xa6BdPush a raw record to the trace pipe.")